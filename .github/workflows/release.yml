name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: Version to publish (M.m.p)
        required: true
        type: choice
        options:
          - p
          - m
          - M

  pull_request:
    types: [closed]
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  versioning:
    runs-on: ubuntu-latest
    if: (github.event.pull_request.merged == true && !contains(github.event.pull_request.labels.*.name, 'no-release')) || github.event_name == 'workflow_dispatch'
    outputs:
      VERSION: ${{ steps.bump.outputs.VERSION }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0
          token: ${{ secrets.WORKFLOW_TOKEN }}

      - name: Bump version
        id: bump
        run: |
          sudo chmod +x bump.sh
          VERSION=$(sed -n 's/.*\.version = "\([0-9]\.[0-9]\.[0-9]\)".*/\1/p' build.zig.zon)
          echo "Current version: $VERSION"
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            INCREMENT="${{ github.event.inputs.version }}"
          else
            INCREMENT="p"
            if [[ "${{ github.event.pull_request.title }} ${{ github.event.pull_request.body }}" =~ \[major\] ]]; then
              INCREMENT="M"
            elif [[ "${{ github.event.pull_request.title }} ${{ github.event.pull_request.body }}" =~ \[minor\] ]]; then
              INCREMENT="m"
            fi
          fi
          echo "Determined increment: $INCREMENT"
          VERSION=$(./bump.sh -$INCREMENT $VERSION)
          if [ $? -ne 0 ]; then
            echo "Failed to bump version"
            exit 1
          fi
          echo "New version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}

      - name: Change version in build.zig.zon
        run: |
          sed -i 's/\.version = "[0-9]\.[0-9]\.[0-9]"/\.version = "${{ steps.bump.outputs.VERSION }}"/' build.zig.zon

      - name: Change version in src/const.zig
        run: |
          sed -i "s/pub const VERSION = .*/pub const VERSION = \"${{ steps.bump.outputs.VERSION }}\";/" src/const.zig

      - name: Update version in INSTALL
        run: |
          echo "${{ steps.bump.outputs.VERSION }}" > INSTALL

      - name: Archive version artifact
        uses: actions/upload-artifact@v4.6.0
        with:
          name: version
          path: .

  push:
    needs: versioning
    runs-on: ubuntu-latest
    if: (github.event.pull_request.merged == true && !contains(github.event.pull_request.labels.*.name, 'no-release')) || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2
        with:
          ref: main
          fetch-depth: 0
          token: ${{ secrets.WORKFLOW_TOKEN }}

      - name: Download version artifact
        uses: actions/download-artifact@v4.1.8
        with:
          name: version

      - name: Commit version change
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add build.zig.zon src/const.zig INSTALL
          git commit -a -m "Bump version to ${{ needs.versioning.outputs.VERSION }}"
        env:
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}

      - name: Push changes
        run: |
          git push origin HEAD:main
        env:
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}

  release:
    needs: [push, versioning]
    runs-on: ubuntu-latest
    if: (github.event.pull_request.merged == true && !contains(github.event.pull_request.labels.*.name, 'no-release')) || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2
        with:
          ref: main
          fetch-depth: 0
          token: ${{ secrets.WORKFLOW_TOKEN }}

      - name: Create release
        run: |
          if ! gh release view "${{ needs.versioning.outputs.VERSION }}" &>/dev/null; then
            gh release create "${{ needs.versioning.outputs.VERSION }}" \
              --title "Release ${{ needs.versioning.outputs.VERSION }}" \
              --generate-notes \
              --latest || true
          else
            echo "Release ${{ needs.versioning.outputs.VERSION }} already exists"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}